type YesNoSelectionOdds = 
 record {
   noOdds: float64;
   yesOdds: float64;
 };
type ValueHistory = 
 record {
   changedOn: int;
   newValue: nat16;
   oldValue: nat16;
 };
type UserDTO = 
 record {
   joinedDate: int;
   kycApprovalDate: int;
   kycComplete: bool;
   kycRef: text;
   kycSubmissionDate: int;
   principalId: PrincipalId;
   termsAcceptedDate: int;
 };
type UserAuditDTO = 
 record {
   date: int;
   offset: nat;
   users: vec UserDTO;
 };
type UpdateWithdrawalAddressDTO = 
 record {
   principalId: PrincipalId;
   withdrawalAddress: text;
 };
type UpdateUsernameDTO = 
 record {
   principalId: PrincipalId;
   username: text;
 };
type UpdateProfilePictureDTO = 
 record {
   principalId: PrincipalId;
   profilePicture: blob;
   profilePictureExtension: text;
 };
type UpdatePlayerDTO = 
 record {
   dateOfBirth: int;
   firstName: text;
   lastName: text;
   nationality: CountryId;
   playerId: ClubId;
   position: PlayerPosition;
   shirtNumber: nat8;
 };
type UpdateLeagueDTO = 
 record {
   abbreviation: text;
   countryId: CountryId;
   formed: int;
   governingBody: text;
   leagueId: LeagueId;
   logo: blob;
   name: text;
   relatedGender: Gender;
   teamCount: nat8;
 };
type UpdateClubDTO = 
 record {
   abbreviatedName: text;
   clubId: ClubId;
   friendlyName: text;
   name: text;
   primaryColourHex: text;
   secondaryColourHex: text;
   shirtType: ShirtType;
   thirdColourHex: text;
 };
type UpdateAppStatusDTO = 
 record {
   onHold: bool;
   version: text;
 };
type UnretirePlayerDTO = 
 record {
   leagueId: LeagueId;
   playerId: ClubId;
 };
type TransferPlayerDTO = 
 record {
   clubId: ClubId;
   leagueId: LeagueId;
   newClubId: ClubId;
   newLeagueId: LeagueId;
   newShirtNumber: nat8;
   playerId: ClubId;
 };
type TimerInfo = 
 record {
   callbackName: text;
   id: int;
   triggerTime: int;
 };
type TeamSelectionOdds = 
 record {
   awayOdds: float64;
   drawOdds: float64;
   homeOdds: float64;
 };
type SystemStateDTO = 
 record {
   onHold: bool;
   version: text;
 };
type SubmitFixtureDataDTO = 
 record {
   fixtureId: FixtureId;
   gameweek: GameweekNumber;
   leagueId: LeagueId;
   playerEventData: vec PlayerEventData;
   seasonId: SeasonId;
 };
type SubmitBetslipDTO = 
 record {
   expectedReturn: nat64;
   leagueId: LeagueId;
   principalId: PrincipalId;
   seasonId: SeasonId;
   totalStake: nat64;
 };
type ShuftiResponse = 
 variant {
   ShuftiAcceptedResponse: ShuftiAcceptedResponse;
   ShuftiRejectedResponse: ShuftiRejectedResponse;
 };
type ShuftiRejectedResponse = record {};
type ShuftiAcceptedResponse = 
 record {
   event: text;
   reference: text;
 };
type ShirtType = 
 variant {
   Filled;
   Striped;
 };
type SetPlayerInjuryDTO = 
 record {
   description: text;
   expectedEndDate: int;
   playerId: ClubId;
 };
type SetMonthlyBetLimitDTO = 
 record {
   monthlyBetLimit: nat64;
   principalId: PrincipalId;
 };
type SetMaxBetLimit = 
 record {
   maxBetLimit: nat64;
   principalId: PrincipalId;
 };
type SetFreeAgentDTO = 
 record {
   leagueId: LeagueId;
   playerId: ClubId;
 };
type SelectionStatus = 
 variant {
   Settled;
   Unsettled;
   Void;
 };
type SelectionDetail = 
 variant {
   AnytimeAssist: PlayerEventDetail;
   AnytimeGoalscorer: PlayerEventDetail;
   BothTeamsToScore: BothTeamsToScoreDetail;
   BothTeamsToScoreAndWinner: BothTeamsToScoreAndWinnerDetail;
   CorrectResult: CorrectResultDetail;
   CorrectScore: ScoreDetail;
   FirstAssist: PlayerEventDetail;
   FirstGoalscorer: PlayerEventDetail;
   HalfTimeFullTimeResult: HalfTimeFullTimeResultDetail;
   HalfTimeScore: ScoreDetail;
   LastAssist: PlayerEventDetail;
   LastGoalscorer: PlayerEventDetail;
   MissPenalty: PlayerEventDetail;
   PenaltyMissed: ClubEventDetail;
   RedCard: PlayerEventDetail;
   ScoreBrace: PlayerGroupEventDetail;
   ScoreHatrick: PlayerGroupEventDetail;
   YellowCard: PlayerEventDetail;
 };
type Selection = 
 record {
   expectedReturns: nat64;
   fixtureId: FixtureId;
   leagueId: LeagueId;
   odds: float64;
   result: BetResult;
   selectionDetail: SelectionDetail;
   selectionType: Category;
   stake: nat64;
   status: SelectionStatus;
   winnings: float64;
 };
type SeasonId = nat16;
type SeasonDTO = 
 record {
   id: SeasonId;
   name: text;
   year: nat16;
 };
type ScoreSelectionOdds = 
 record {
   awayGoals: nat8;
   homeGoals: nat8;
   odds: float64;
 };
type ScoreDetail = 
 record {
   awayGoals: nat8;
   homeGoals: nat8;
 };
type RustResult = 
 variant {
   Err: text;
   Ok: text;
 };
type RevaluePlayerUpDTO = 
 record {
   gameweek: GameweekNumber;
   playerId: ClubId;
   seasonId: SeasonId;
 };
type RevaluePlayerDownDTO = 
 record {
   gameweek: GameweekNumber;
   playerId: ClubId;
   seasonId: SeasonId;
 };
type RetirePlayerDTO = 
 record {
   playerId: ClubId;
   retirementDate: int;
 };
type Result_9 = 
 variant {
   err: Error;
   ok: MatchOddsDTO;
 };
type Result_8 = 
 variant {
   err: Error;
   ok: PlayerDetailDTO;
 };
type Result_7 = 
 variant {
   err: Error;
   ok: ProfileDTO;
 };
type Result_6 = 
 variant {
   err: Error;
   ok: vec SeasonDTO;
 };
type Result_5 = 
 variant {
   err: Error;
   ok: SystemStateDTO;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: vec TimerInfo;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: UserAuditDTO;
 };
type Result_20 = 
 variant {
   err: Error;
   ok: vec BetSlip;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: bool;
 };
type Result_19 = 
 variant {
   err: Error;
   ok: vec HomePageFixtureDTO;
 };
type Result_18 = 
 variant {
   err: Error;
   ok: vec CountryDTO;
 };
type Result_17 = 
 variant {
   err: Error;
   ok: vec DataHash;
 };
type Result_16 = 
 variant {
   err: Error;
   ok: vec DataHashDTO;
 };
type Result_15 = 
 variant {
   err: Error;
   ok: vec FixtureDTO;
 };
type Result_14 = 
 variant {
   err: Error;
   ok: vec ClubDTO;
 };
type Result_13 = 
 variant {
   err: Error;
   ok: vec PlayerDTO;
 };
type Result_12 = 
 variant {
   err: Error;
   ok: LeagueStatus;
 };
type Result_11 = 
 variant {
   err: Error;
   ok: vec FootballLeagueDTO;
 };
type Result_10 = 
 variant {
   err: Error;
   ok: vec LoanedPlayerDTO;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: BetSlip;
 };
type ResultAndYesNoSelectionOdds = 
 record {
   isYes: bool;
   odds: float64;
   result: MatchResult;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type RescheduleFixtureDTO = 
 record {
   postponedFixtureId: FixtureId;
   updatedFixtureDate: int;
   updatedFixtureGameweek: GameweekNumber;
 };
type RemoveClubDTO = 
 record {
   clubId: ClubId;
   leagueId: LeagueId;
 };
type RecallPlayerDTO = 
 record {
   playerId: ClubId;
   recallFromLeagueId: LeagueId;
 };
type PromoteClubDTO = 
 record {
   abbreviatedName: text;
   friendlyName: text;
   name: text;
   primaryColourHex: text;
   secondaryColourHex: text;
   shirtType: ShirtType;
   thirdColourHex: text;
 };
type ProfileDTO = 
 record {
   accountBalance: nat64;
   accountOnPause: bool;
   joinedDate: int;
   kycApprovalDate: int;
   kycComplete: bool;
   kycRef: text;
   kycSubmissionDate: int;
   maxBetLimit: nat64;
   monthlyBetLimit: nat64;
   monthlyBetTotal: nat64;
   principalId: PrincipalId;
   profilePicture: opt blob;
   profilePictureExtension: text;
   termsAcceptedDate: int;
   username: text;
   withdrawalAddress: text;
 };
type PrincipalId = text;
type PostponeFixtureDTO = 
 record {
   fixtureId: FixtureId;
   leagueId: LeagueId;
   seasonId: SeasonId;
 };
type PlayerStatus = 
 variant {
   Active;
   FreeAgent;
   OnLoan;
   Retired;
 };
type PlayerSelectionOdds = 
 record {
   odds: float64;
   playerId: PlayerId;
 };
type PlayerPosition = 
 variant {
   Defender;
   Forward;
   Goalkeeper;
   Midfielder;
 };
type PlayerId = nat16;
type PlayerGroupEventDetail = 
 record {
   clubId: ClubId;
   playerId: PlayerId;
 };
type PlayerGameweekDTO = 
 record {
   events: vec PlayerEventData;
   fixtureId: FixtureId;
   number: nat8;
   points: int16;
 };
type PlayerEventType = 
 variant {
   Appearance;
   CleanSheet;
   Goal;
   GoalAssisted;
   GoalConceded;
   HighestScoringPlayer;
   KeeperSave;
   OwnGoal;
   PenaltyMissed;
   PenaltySaved;
   RedCard;
   YellowCard;
 };
type PlayerEventDetail = 
 record {
   clubId: ClubId;
   playerId: PlayerId;
 };
type PlayerEventData = 
 record {
   clubId: ClubId;
   eventEndMinute: nat8;
   eventStartMinute: nat8;
   eventType: PlayerEventType;
   fixtureId: FixtureId;
   playerId: nat16;
 };
type PlayerDetailDTO = 
 record {
   clubId: ClubId;
   dateOfBirth: int;
   firstName: text;
   gameweeks: vec PlayerGameweekDTO;
   id: PlayerId;
   injuryHistory: vec InjuryHistory;
   lastName: text;
   latestInjuryEndDate: int;
   nationality: CountryId;
   parentClubId: ClubId;
   position: PlayerPosition;
   retirementDate: int;
   seasonId: SeasonId;
   shirtNumber: nat8;
   status: PlayerStatus;
   valueHistory: vec ValueHistory;
   valueQuarterMillions: nat16;
 };
type PlayerDTO = 
 record {
   clubId: ClubId;
   currentLoanEndDate: int;
   dateOfBirth: int;
   firstName: text;
   id: nat16;
   lastName: text;
   leagueId: LeagueId;
   nationality: CountryId;
   parentClubId: ClubId;
   parentLeagueId: LeagueId;
   position: PlayerPosition;
   shirtNumber: nat8;
   status: PlayerStatus;
   valueQuarterMillions: nat16;
 };
type PauseAccountDTO = 
 record {
   pauseDays: nat;
   principalId: PrincipalId;
 };
type OverUnderSelectionOdds = 
 record {
   overOdds: vec OverUnderSelection;
   underOdds: vec OverUnderSelection;
 };
type OverUnderSelection = 
 record {
   margin: float64;
   odds: float64;
 };
type MoveFixtureDTO = 
 record {
   fixtureId: FixtureId;
   leagueId: LeagueId;
   seasonId: SeasonId;
   updatedFixtureDate: int;
   updatedFixtureGameweek: GameweekNumber;
 };
type MissPenaltyOdds = 
 record {
   awayTeam: float64;
   homeTeam: float64;
 };
type MatchResult = 
 variant {
   AwayWin;
   Draw;
   HomeWin;
 };
type MatchOddsDTO = 
 record {
   anytimeAssist: vec PlayerSelectionOdds;
   anytimeScorers: vec PlayerSelectionOdds;
   bothTeamsToScore: YesNoSelectionOdds;
   bothTeamsToScoreAndWinner: vec ResultAndYesNoSelectionOdds;
   correctResults: TeamSelectionOdds;
   correctScores: vec ScoreSelectionOdds;
   firstAssisters: vec PlayerSelectionOdds;
   firstGoalscorers: vec PlayerSelectionOdds;
   fixtureId: FixtureId;
   goalsOverUnder: OverUnderSelectionOdds;
   halfTimeFullTimeResult: vec HalfTimeFullTimeOdds;
   halfTimeScores: vec ScoreSelectionOdds;
   lastAssist: vec PlayerSelectionOdds;
   lastGoalscorers: vec PlayerSelectionOdds;
   leagueId: LeagueId;
   penaltyMissed: MissPenaltyOdds;
   penaltyMissers: vec PlayerSelectionOdds;
   redCards: vec PlayerSelectionOdds;
   scoresBrace: vec PlayerSelectionOdds;
   scoresHatTrick: vec PlayerSelectionOdds;
   yellowCards: vec PlayerSelectionOdds;
 };
type LoanedPlayerDTO = 
 record {
   clubId: ClubId;
   currentLoanEndDate: int;
   dateOfBirth: int;
   firstName: text;
   id: nat16;
   lastName: text;
   leagueId: LeagueId;
   nationality: CountryId;
   parentClubId: ClubId;
   parentLeagueId: LeagueId;
   position: PlayerPosition;
   shirtNumber: nat8;
   status: PlayerStatus;
   valueQuarterMillions: nat16;
 };
type LoanPlayerDTO = 
 record {
   loanClubId: ClubId;
   loanEndDate: int;
   loanLeagueId: LeagueId;
   playerId: ClubId;
 };
type LeagueStatus = 
 record {
   activeGameweek: GameweekNumber;
   activeMonth: CalendarMonth;
   activeSeasonId: SeasonId;
   completedGameweek: GameweekNumber;
   leagueId: LeagueId;
   seasonActive: bool;
   totalGameweeks: nat8;
   transferWindowActive: bool;
   transferWindowEndDay: nat8;
   transferWindowEndMonth: nat8;
   transferWindowStartDay: nat8;
   transferWindowStartMonth: nat8;
   unplayedGameweek: GameweekNumber;
 };
type LeagueId = nat16;
type InjuryHistory = 
 record {
   description: text;
   expectedEndDate: int;
   injuryStartDate: int;
 };
type HomePageFixtureDTO = 
 record {
   awayOdds: float64;
   drawOdds: float64;
   fixtureId: FixtureId;
   gameweek: GameweekNumber;
   homeOdds: float64;
   leagueId: LeagueId;
 };
type HalfTimeFullTimeResultDetail = 
 record {
   fullTimeResult: MatchResult;
   halfTimeResult: MatchResult;
 };
type HalfTimeFullTimeOdds = 
 record {
   firstHalfResult: MatchResult;
   odds: float64;
   secondHalfResult: MatchResult;
 };
type GetBetsDTO = record {principalId: PrincipalId;};
type Gender = 
 variant {
   Female;
   Male;
 };
type GameweekNumber = nat8;
type GameweekFiltersDTO = 
 record {
   gameweek: GameweekNumber;
   seasonId: SeasonId;
 };
type FootballLeagueDTO = 
 record {
   abbreviation: text;
   countryId: CountryId;
   formed: int;
   governingBody: text;
   id: LeagueId;
   logo: blob;
   name: text;
   relatedGender: Gender;
   teamCount: nat8;
 };
type FixtureStatusType = 
 variant {
   Active;
   Complete;
   Finalised;
   Unplayed;
 };
type FixtureId = nat32;
type FixtureDTO = 
 record {
   awayClubId: ClubId;
   awayGoals: nat8;
   events: vec PlayerEventData;
   gameweek: GameweekNumber;
   highestScoringPlayerId: nat16;
   homeClubId: ClubId;
   homeGoals: nat8;
   id: nat32;
   kickOff: int;
   seasonId: SeasonId;
   status: FixtureStatusType;
 };
type Error = 
 variant {
   AlreadyExists;
   CanisterCreateError;
   CanisterFull;
   DecodeError;
   InvalidData;
   NotAllowed;
   NotAuthorized;
   NotFound;
 };
type DataHashDTO = 
 record {
   category: text;
   hash: text;
 };
type DataHash = 
 record {
   category: text;
   hash: text;
 };
type CreatePlayerDTO = 
 record {
   clubId: ClubId;
   dateOfBirth: int;
   firstName: text;
   lastName: text;
   nationality: CountryId;
   position: PlayerPosition;
   shirtNumber: nat8;
   valueQuarterMillions: nat16;
 };
type CreateLeagueDTO = 
 record {
   abbreviation: text;
   countryId: CountryId;
   formed: int;
   governingBody: text;
   logo: blob;
   name: text;
   relatedGender: Gender;
   teamCount: nat8;
 };
type CreateClubDTO = 
 record {
   abbreviatedName: text;
   friendlyName: text;
   leagueId: LeagueId;
   name: text;
   primaryColourHex: text;
   secondaryColourHex: text;
   shirtType: ShirtType;
   thirdColourHex: text;
 };
type CountryId = nat16;
type CountryDTO = 
 record {
   code: text;
   id: CountryId;
   name: text;
 };
type CorrectResultDetail = record {matchResult: MatchResult;};
type ClubId = nat16;
type ClubEventDetail = record {clubId: ClubId;};
type ClubDTO = 
 record {
   abbreviatedName: text;
   friendlyName: text;
   id: ClubId;
   name: text;
   primaryColourHex: text;
   secondaryColourHex: text;
   shirtType: ShirtType;
   thirdColourHex: text;
 };
type Category = 
 variant {
   AnytimeAssist;
   AnytimeGoalscorer;
   BothTeamsToScore;
   BothTeamsToScoreAndWinner;
   CorrectResult;
   CorrectScore;
   FirstAssist;
   FirstGoalscorer;
   HalfTimeFullTimeResult;
   HalfTimeScore;
   LastAssist;
   LastGoalscorer;
   MissPenalty;
   PenaltyMissed;
   RedCard;
   ScoreBrace;
   ScoreHatrick;
   YellowCard;
 };
type CalendarMonth = nat8;
type BothTeamsToScoreDetail = record {bothTeamsToScore: bool;};
type BothTeamsToScoreAndWinnerDetail = 
 record {
   bothTeamsToScore: bool;
   matchResult: MatchResult;
 };
type BetType = 
 variant {
   Canadian;
   Double;
   EightFold;
   FiveFold;
   FourFold;
   Goliath;
   Heinz;
   Lucky15;
   Lucky31;
   Lucky63;
   NineFold;
   Patent;
   SevenFold;
   Single;
   SixFold;
   SuperHeinz;
   TenFold;
   Treble;
   Trixie;
   Yankee;
 };
type BetSlip = 
 record {
   betType: BetType;
   expectedReturns: nat64;
   id: nat;
   placedBy: PrincipalId;
   placedOn: int;
   result: BetResult;
   selections: vec Selection;
   settledOn: int;
   status: SelectionStatus;
   totalStake: nat64;
   totalWinnings: nat64;
 };
type BetResult = 
 variant {
   Lost;
   Open;
   Won;
 };
type AddInitialFixturesDTO = record {seasonFixtures: vec FixtureDTO;};
service : {
  agreeTerms: () -> (Result);
  calculateGameweekScores: (text) -> (Result);
  calculateLeaderboards: (text) -> (Result);
  calculateWeeklyRewards: (text, GameweekNumber) -> (Result);
  executeAddInitialFixtures: (LeagueId, AddInitialFixturesDTO) -> ();
  executeCreateClub: (CreateClubDTO) -> ();
  executeCreateLeague: (CreateLeagueDTO) -> ();
  executeCreatePlayer: (LeagueId, CreatePlayerDTO) -> ();
  executeLoanPlayer: (LeagueId, LoanPlayerDTO) -> ();
  executeMoveFixture: (MoveFixtureDTO) -> ();
  executePostponeFixture: (PostponeFixtureDTO) -> ();
  executePromoteClub: (LeagueId, PromoteClubDTO) -> ();
  executeRecallPlayer: (RecallPlayerDTO) -> ();
  executeRemoveClub: (RemoveClubDTO) -> ();
  executeRescheduleFixture: (LeagueId, RescheduleFixtureDTO) -> ();
  executeRetirePlayer: (LeagueId, RetirePlayerDTO) -> ();
  executeRevaluePlayerDown: (LeagueId, RevaluePlayerDownDTO) -> ();
  executeRevaluePlayerUp: (LeagueId, RevaluePlayerUpDTO) -> ();
  executeSetFreeAgent: (LeagueId, SetFreeAgentDTO) -> ();
  executeSetPlayerInjury: (LeagueId, SetPlayerInjuryDTO) -> ();
  executeSubmitFixtureData: (SubmitFixtureDataDTO) -> ();
  executeTransferPlayer: (LeagueId, TransferPlayerDTO) -> ();
  executeUnretirePlayer: (LeagueId, UnretirePlayerDTO) -> ();
  executeUpdateClub: (LeagueId, UpdateClubDTO) -> ();
  executeUpdateLeague: (UpdateLeagueDTO) -> ();
  executeUpdatePlayer: (LeagueId, UpdatePlayerDTO) -> ();
  getBets: (GetBetsDTO) -> (Result_20);
  getBettableHomepageFixtures: (LeagueId) -> (Result_19) query;
  getCountries: () -> (Result_18) query;
  getDataHashForCategory: (LeagueId, text) -> (Result_17) composite_query;
  getDataHashes: () -> (Result_16) composite_query;
  getFixtures: (LeagueId) -> (Result_15) composite_query;
  getLeagueClubs: (LeagueId) -> (Result_14) composite_query;
  getLeaguePlayers: (LeagueId) -> (Result_13) composite_query;
  getLeagueStatus: (LeagueId) -> (Result_12) composite_query;
  getLeagues: () -> (Result_11) composite_query;
  getLoanedPlayers: (LeagueId) -> (Result_10) composite_query;
  getMatchOdds: (LeagueId, FixtureId) -> (Result_9) query;
  getPlayerDetailsForGameweek: (LeagueId, GameweekFiltersDTO) ->
   (Result_8) composite_query;
  getProfile: () -> (Result_7);
  getSeasons: (LeagueId) -> (Result_6) composite_query;
  getSystemState: (text) -> (Result_5) composite_query;
  getTimers: () -> (Result_4) composite_query;
  getUserAudit: (nat) -> (Result_3);
  isAdmin: () -> (Result_2);
  isAuditor: () -> (Result_2);
  isDataManager: () -> (Result_2);
  kycVerificationCallback: (ShuftiResponse) -> (Result);
  pauseAccount: (PauseAccountDTO) -> (Result);
  payWeeklyRewards: (text, GameweekNumber) -> (Result);
  placeBet: (SubmitBetslipDTO) -> (Result_1);
  refreshLeagueHashes: () -> (Result);
  setMaxBetLimit: (SetMaxBetLimit) -> (Result);
  setMonthlyBetLimit: (SetMonthlyBetLimitDTO) -> (Result);
  snapshotManagers: (text) -> (Result);
  storeKYCReference: (text) -> ();
  updateBettingOdds: (LeagueId) -> (Result);
  updateProfilePicture: (UpdateProfilePictureDTO) -> (Result);
  updateSystemState: (text, UpdateAppStatusDTO) -> (Result);
  updateUsername: (UpdateUsernameDTO) -> (Result);
  updateWithdrawalAddress: (UpdateWithdrawalAddressDTO) -> (Result);
  validateAddInitialFixtures: (AddInitialFixturesDTO) -> (RustResult) query;
  validateCreateLeague: (CreateLeagueDTO) -> (RustResult) query;
  validateCreatePlayer: (CreatePlayerDTO) -> (RustResult) query;
  validateLoanPlayer: (LoanPlayerDTO) -> (RustResult) query;
  validateMoveFixture: (MoveFixtureDTO) -> (RustResult) query;
  validatePostponeFixture: (PostponeFixtureDTO) -> (RustResult) query;
  validatePromoteClub: (PromoteClubDTO) -> (RustResult) query;
  validateRecallPlayer: (RecallPlayerDTO) -> (RustResult) query;
  validateRescheduleFixture: (RescheduleFixtureDTO) -> (RustResult) query;
  validateRetirePlayer: (RetirePlayerDTO) -> (RustResult) query;
  validateRevaluePlayerDown: (RevaluePlayerDownDTO) -> (RustResult) query;
  validateRevaluePlayerUp: (RevaluePlayerUpDTO) -> (RustResult) query;
  validateSetFreeAgent: (TransferPlayerDTO) -> (RustResult) query;
  validateSetPlayerInjury: (SetPlayerInjuryDTO) -> (RustResult) query;
  validateSubmitFixtureData: (SubmitFixtureDataDTO) -> (RustResult) query;
  validateTransferPlayer: (TransferPlayerDTO) -> (RustResult) query;
  validateUnretirePlayer: (UnretirePlayerDTO) -> (RustResult) query;
  validateUpdateClub: (UpdateClubDTO) -> (RustResult) query;
  validateUpdateLeague: (UpdateLeagueDTO) -> (RustResult) query;
  validateUpdatePlayer: (UpdatePlayerDTO) -> (RustResult) query;
}
