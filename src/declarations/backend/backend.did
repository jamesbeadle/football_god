type ShirtType = 
 variant {
   Filled;
   Striped;
 };
type Seasons = record {seasons: vec Season;};
type SeasonId = nat16;
type Season = 
 record {
   id: nat16;
   name: text;
   year: nat16;
 };
type Result_9 = 
 variant {
   err: Error;
   ok: Countries;
 };
type Result_8 = 
 variant {
   err: Error;
   ok: DataHashes;
 };
type Result_7 = 
 variant {
   err: Error;
   ok: Fixtures;
 };
type Result_6 = 
 variant {
   err: Error;
   ok: LeagueStatus;
 };
type Result_5 = 
 variant {
   err: Error;
   ok: Leagues;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: LoanedPlayers;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: PlayerValueLeaderboard;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: Players;
 };
type Result_12 = 
 variant {
   err: Error;
   ok: AppStatus;
 };
type Result_11 = 
 variant {
   err: Error;
   ok: ClubValueLeaderboard;
 };
type Result_10 = 
 variant {
   err: Error;
   ok: Clubs;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: PostponedFixtures;
 };
type Result = 
 variant {
   err: Error;
   ok: Seasons;
 };
type PostponedFixtures = 
 record {
   fixtures: vec Fixture;
   leagueId: LeagueId;
   seasonId: SeasonId;
 };
type Players = record {players: vec Player;};
type PlayerValueLeaderboard = record {players: vec PlayerSummary;};
type PlayerSummary = 
 record {
   clubId: ClubId;
   leagueId: LeagueId;
   playerId: PlayerId;
   position: nat;
   positionText: text;
   priorValue: nat16;
   totalValue: nat16;
 };
type PlayerStatus = 
 variant {
   Active;
   FreeAgent;
   OnLoan;
   Retired;
 };
type PlayerPosition = 
 variant {
   Defender;
   Forward;
   Goalkeeper;
   Midfielder;
 };
type PlayerId = nat16;
type PlayerEventType = 
 variant {
   Appearance;
   CleanSheet;
   Goal;
   GoalAssisted;
   GoalConceded;
   HighestScoringPlayer;
   KeeperSave;
   OwnGoal;
   PenaltyMissed;
   PenaltySaved;
   RedCard;
   YellowCard;
 };
type PlayerEventData = 
 record {
   clubId: ClubId;
   eventEndMinute: nat8;
   eventStartMinute: nat8;
   eventType: PlayerEventType;
   fixtureId: FixtureId;
   playerId: nat16;
 };
type Player = 
 record {
   clubId: ClubId;
   currentLoanEndDate: int;
   dateOfBirth: int;
   firstName: text;
   id: nat16;
   lastName: text;
   leagueId: LeagueId;
   nationality: CountryId;
   parentClubId: ClubId;
   parentLeagueId: LeagueId;
   position: PlayerPosition;
   shirtNumber: nat8;
   status: PlayerStatus;
   valueQuarterMillions: nat16;
 };
type MostValuablePlayer = 
 record {
   firstName: text;
   id: PlayerId;
   lastName: text;
   value: nat16;
 };
type LoanedPlayers = record {players: vec Player;};
type Leagues = record {leagues: vec League;};
type LeagueStatus = 
 record {
   activeGameweek: GameweekNumber;
   activeMonth: CalendarMonth;
   activeSeasonId: SeasonId;
   completedGameweek: GameweekNumber;
   leagueId: LeagueId;
   seasonActive: bool;
   totalGameweeks: nat8;
   transferWindowActive: bool;
   transferWindowEndDay: nat8;
   transferWindowEndMonth: nat8;
   transferWindowStartDay: nat8;
   transferWindowStartMonth: nat8;
   unplayedGameweek: GameweekNumber;
 };
type LeagueId = nat16;
type League = 
 record {
   abbreviation: text;
   countryId: CountryId;
   formed: int;
   governingBody: text;
   id: LeagueId;
   logo: blob;
   name: text;
   relatedGender: Gender;
   teamCount: nat8;
 };
type GetSeasons = record {leagueId: LeagueId;};
type GetPostponedFixtures = record {leagueId: LeagueId;};
type GetPlayers = record {leagueId: LeagueId;};
type GetPlayerValueLeaderboard = record {};
type GetLoanedPlayers = record {leagueId: LeagueId;};
type GetLeagues = record {};
type GetLeagueStatus = record {leagueId: LeagueId;};
type GetFixtures = 
 record {
   leagueId: LeagueId;
   seasonId: SeasonId;
 };
type GetDataHashes = record {leagueId: LeagueId;};
type GetCountries = record {};
type GetClubs = record {leagueId: LeagueId;};
type GetClubValueLeaderboard = record {};
type Gender = 
 variant {
   Female;
   Male;
 };
type GameweekNumber = nat8;
type Fixtures = 
 record {
   fixtures: vec Fixture;
   leagueId: LeagueId;
   seasonId: SeasonId;
 };
type FixtureStatusType = 
 variant {
   Active;
   Complete;
   Finalised;
   Unplayed;
 };
type FixtureId = nat32;
type Fixture = 
 record {
   awayClubId: ClubId;
   awayGoals: nat8;
   events: vec PlayerEventData;
   gameweek: GameweekNumber;
   highestScoringPlayerId: PlayerId;
   homeClubId: ClubId;
   homeGoals: nat8;
   id: FixtureId;
   kickOff: int;
   seasonId: SeasonId;
   status: FixtureStatusType;
 };
type Error = 
 variant {
   AlreadyClaimed;
   AlreadyExists;
   CanisterCreateError;
   DecodeError;
   DuplicateData;
   FailedInterCanisterCall;
   InEligible;
   IncorrectSetup;
   InsufficientFunds;
   InsufficientPacketsRemaining;
   InvalidData;
   InvalidProfilePicture;
   InvalidProperty;
   MaxDataExceeded;
   NeuronAlreadyUsed;
   NoPacketsRemaining;
   NotAllowed;
   NotAuthorized;
   NotFound;
   SystemOnHold;
   TooLong;
   UpdateFailed;
 };
type DataHashes = record {dataHashes: vec DataHash;};
type DataHash = 
 record {
   category: text;
   hash: text;
 };
type CountryId = nat16;
type Country = 
 record {
   code: text;
   id: CountryId;
   name: text;
 };
type Countries = record {countries: vec Country;};
type Clubs = 
 record {
   clubs: vec Club;
   leagueId: LeagueId;
 };
type ClubValueLeaderboard = record {clubs: vec ClubSummary;};
type ClubSummary = 
 record {
   clubId: ClubId;
   clubName: text;
   gender: Gender;
   leagueId: LeagueId;
   mvp: MostValuablePlayer;
   position: nat;
   positionText: text;
   primaryColour: text;
   priorValue: nat16;
   secondaryColour: text;
   shirtType: ShirtType;
   thirdColour: text;
   totalDFValue: nat16;
   totalDefenders: nat8;
   totalFWValue: nat16;
   totalForwards: nat8;
   totalGKValue: nat16;
   totalGoalkeepers: nat8;
   totalMFValue: nat16;
   totalMidfielders: nat8;
   totalPlayers: nat8;
   totalValue: nat16;
 };
type ClubId = nat16;
type Club = 
 record {
   abbreviatedName: text;
   friendlyName: text;
   id: ClubId;
   name: text;
   primaryColourHex: text;
   secondaryColourHex: text;
   shirtType: ShirtType;
   thirdColourHex: text;
 };
type CalendarMonth = nat8;
type AppStatus = 
 record {
   onHold: bool;
   version: text;
 };
service : {
  getAppStatus: () -> (Result_12) query;
  getClubValueLeaderboard: (GetClubValueLeaderboard) -> (Result_11);
  getClubs: (GetClubs) -> (Result_10);
  getCountries: (GetCountries) -> (Result_9);
  getDataHashes: (GetDataHashes) -> (Result_8);
  getFixtures: (GetFixtures) -> (Result_7);
  getLeagueStatus: (GetLeagueStatus) -> (Result_6);
  getLeagues: (GetLeagues) -> (Result_5);
  getLoanedPlayers: (GetLoanedPlayers) -> (Result_4);
  getPlayerValueLeaderboard: (GetPlayerValueLeaderboard) -> (Result_3);
  getPlayers: (GetPlayers) -> (Result_2);
  getPostponedFixtures: (GetPostponedFixtures) -> (Result_1);
  getSeasons: (GetSeasons) -> (Result);
}
