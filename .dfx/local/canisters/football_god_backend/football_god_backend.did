type UpdatePlayerDTO = 
 record {
   dateOfBirth: int;
   firstName: text;
   lastName: text;
   nationality: CountryId;
   playerId: ClubId;
   position: PlayerPosition;
   shirtNumber: nat8;
 };
type UpdateLeagueDTO = 
 record {
   abbreviation: text;
   countryId: CountryId;
   formed: int;
   governingBody: text;
   leagueId: LeagueId;
   logo: blob;
   name: text;
   relatedGender: Gender;
   teamCount: nat8;
 };
type UpdateClubDTO = 
 record {
   abbreviatedName: text;
   clubId: ClubId;
   friendlyName: text;
   name: text;
   primaryColourHex: text;
   secondaryColourHex: text;
   shirtType: ShirtType;
   thirdColourHex: text;
 };
type UnretirePlayerDTO = record {playerId: ClubId;};
type TransferPlayerDTO = 
 record {
   clubId: ClubId;
   leagueId: LeagueId;
   newClubId: ClubId;
   newLeagueId: LeagueId;
   newShirtNumber: nat8;
   playerId: ClubId;
 };
type SubmitFixtureDataDTO = 
 record {
   fixtureId: FixtureId;
   gameweek: GameweekNumber;
   month: CalendarMonth;
   playerEventData: vec PlayerEventData;
 };
type ShirtType = 
 variant {
   Filled;
   Striped;
 };
type SetPlayerInjuryDTO = 
 record {
   description: text;
   expectedEndDate: int;
   playerId: ClubId;
 };
type SeasonId = nat16;
type RustResult = 
 variant {
   Err: text;
   Ok: text;
 };
type RevaluePlayerUpDTO = 
 record {
   gameweek: GameweekNumber;
   playerId: ClubId;
   seasonId: SeasonId;
 };
type RevaluePlayerDownDTO = 
 record {
   gameweek: GameweekNumber;
   playerId: ClubId;
   seasonId: SeasonId;
 };
type RetirePlayerDTO = 
 record {
   playerId: ClubId;
   retirementDate: int;
 };
type Result_5 = 
 variant {
   err: Error;
   ok: vec CountryDTO;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: vec ClubDTO;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: vec PlayerDTO;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: vec FootballLeagueDTO;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: ProfileDTO;
 };
type Result = 
 variant {
   err: Error;
   ok: bool;
 };
type RescheduleFixtureDTO = 
 record {
   postponedFixtureId: FixtureId;
   updatedFixtureDate: int;
   updatedFixtureGameweek: GameweekNumber;
 };
type RecallPlayerDTO = record {playerId: ClubId;};
type PromoteNewClubDTO = 
 record {
   abbreviatedName: text;
   friendlyName: text;
   name: text;
   primaryColourHex: text;
   secondaryColourHex: text;
   shirtType: ShirtType;
   thirdColourHex: text;
 };
type ProfileDTO = 
 record {
   principalId: PrincipalId;
   username: text;
   withdrawalAddress: text;
 };
type PrincipalId = text;
type PostponeFixtureDTO = record {fixtureId: FixtureId;};
type PlayerStatus = 
 variant {
   Active;
   FreeAgent;
   OnLoan;
   Retired;
 };
type PlayerPosition = 
 variant {
   Defender;
   Forward;
   Goalkeeper;
   Midfielder;
 };
type PlayerEventType = 
 variant {
   Appearance;
   CleanSheet;
   Goal;
   GoalAssisted;
   GoalConceded;
   HighestScoringPlayer;
   KeeperSave;
   OwnGoal;
   PenaltyMissed;
   PenaltySaved;
   RedCard;
   YellowCard;
 };
type PlayerEventData = 
 record {
   clubId: ClubId;
   eventEndMinute: nat8;
   eventStartMinute: nat8;
   eventType: PlayerEventType;
   fixtureId: FixtureId;
   playerId: nat16;
 };
type PlayerDTO = 
 record {
   clubId: ClubId;
   dateOfBirth: int;
   firstName: text;
   id: nat16;
   lastName: text;
   nationality: CountryId;
   position: PlayerPosition;
   shirtNumber: nat8;
   status: PlayerStatus;
   valueQuarterMillions: nat16;
 };
type MoveFixtureDTO = 
 record {
   fixtureId: FixtureId;
   updatedFixtureDate: int;
   updatedFixtureGameweek: GameweekNumber;
 };
type LoanPlayerDTO = 
 record {
   gameweek: GameweekNumber;
   loanClubId: ClubId;
   loanEndDate: int;
   loanLeagueId: LeagueId;
   playerId: ClubId;
   seasonId: SeasonId;
 };
type LeagueId = nat16;
type Gender = 
 variant {
   Female;
   Male;
 };
type GameweekNumber = nat8;
type FootballLeagueDTO = 
 record {
   abbreviation: text;
   countryId: CountryId;
   formed: int;
   governingBody: text;
   id: LeagueId;
   logo: blob;
   name: text;
   relatedGender: Gender;
   teamCount: nat8;
 };
type FixtureStatusType = 
 variant {
   Active;
   Complete;
   Finalised;
   Unplayed;
 };
type FixtureId = nat32;
type FixtureDTO = 
 record {
   awayClubId: ClubId;
   awayGoals: nat8;
   events: vec PlayerEventData;
   gameweek: GameweekNumber;
   highestScoringPlayerId: nat16;
   homeClubId: ClubId;
   homeGoals: nat8;
   id: nat32;
   kickOff: int;
   seasonId: SeasonId;
   status: FixtureStatusType;
 };
type Error = 
 variant {
   AlreadyExists;
   DecodeError;
   NotAllowed;
   NotAuthorized;
   NotFound;
 };
type CreatePlayerDTO = 
 record {
   clubId: ClubId;
   dateOfBirth: int;
   firstName: text;
   gender: Gender;
   lastName: text;
   nationality: CountryId;
   position: PlayerPosition;
   shirtNumber: nat8;
   valueQuarterMillions: nat16;
 };
type CreateLeagueDTO = 
 record {
   abbreviation: text;
   countryId: CountryId;
   formed: int;
   governingBody: text;
   logo: blob;
   name: text;
   relatedGender: Gender;
   teamCount: nat8;
 };
type CountryId = nat16;
type CountryDTO = 
 record {
   code: text;
   id: CountryId;
   name: text;
 };
type ClubId = nat16;
type ClubDTO = 
 record {
   abbreviatedName: text;
   friendlyName: text;
   id: ClubId;
   name: text;
   primaryColourHex: text;
   secondaryColourHex: text;
   shirtType: ShirtType;
   thirdColourHex: text;
 };
type CalendarMonth = nat8;
type AddInitialFixturesDTO = record {seasonFixtures: vec FixtureDTO;};
service : {
  executeAddInitialFixtures: (LeagueId, AddInitialFixturesDTO) -> ();
  executeCreateLeague: (CreateLeagueDTO) -> () query;
  executeCreatePlayer: (LeagueId, CreatePlayerDTO) -> ();
  executeLoanPlayer: (LeagueId, LoanPlayerDTO) -> ();
  executeMoveFixture: (LeagueId, MoveFixtureDTO) -> ();
  executePostponeFixture: (LeagueId, PostponeFixtureDTO) -> ();
  executePromoteNewClub: (LeagueId, PromoteNewClubDTO) -> ();
  executeRecallPlayer: (LeagueId, RecallPlayerDTO) -> ();
  executeRescheduleFixture: (LeagueId, RescheduleFixtureDTO) -> ();
  executeRetirePlayer: (LeagueId, RetirePlayerDTO) -> ();
  executeRevaluePlayerDown: (LeagueId, RevaluePlayerDownDTO) -> ();
  executeRevaluePlayerUp: (LeagueId, RevaluePlayerUpDTO) -> ();
  executeSetPlayerInjury: (LeagueId, SetPlayerInjuryDTO) -> ();
  executeTransferPlayer: (LeagueId, TransferPlayerDTO) -> ();
  executeUnretirePlayer: (LeagueId, UnretirePlayerDTO) -> ();
  executeUpdateClub: (LeagueId, UpdateClubDTO) -> ();
  executeUpdateLeague: (UpdateLeagueDTO) -> () query;
  executeUpdatePlayer: (LeagueId, UpdatePlayerDTO) -> ();
  getCountries: () -> (Result_5) query;
  getLeagueClubs: (LeagueId) -> (Result_4) composite_query;
  getLeaguePlayers: (LeagueId) -> (Result_3) composite_query;
  getLeagues: () -> (Result_2) composite_query;
  getProfile: () -> (Result_1) query;
  isAdmin: () -> (Result);
  validateAddInitialFixtures: (AddInitialFixturesDTO) -> (RustResult) query;
  validateCreateLeague: (CreateLeagueDTO) -> (RustResult) query;
  validateCreatePlayer: (CreatePlayerDTO) -> (RustResult) query;
  validateLoanPlayer: (LoanPlayerDTO) -> (RustResult) query;
  validateMoveFixture: (MoveFixtureDTO) -> (RustResult) query;
  validatePostponeFixture: (PostponeFixtureDTO) -> (RustResult) query;
  validatePromoteNewClub: (PromoteNewClubDTO) -> (RustResult) query;
  validateRecallPlayer: (RecallPlayerDTO) -> (RustResult) query;
  validateRescheduleFixture: (RescheduleFixtureDTO) -> (RustResult) query;
  validateRetirePlayer: (RetirePlayerDTO) -> (RustResult) query;
  validateRevaluePlayerDown: (RevaluePlayerDownDTO) -> (RustResult) query;
  validateRevaluePlayerUp: (RevaluePlayerUpDTO) -> (RustResult) query;
  validateSetPlayerInjury: (SetPlayerInjuryDTO) -> (RustResult) query;
  validateSubmitFixtureData: (SubmitFixtureDataDTO) -> (RustResult) query;
  validateTransferPlayer: (TransferPlayerDTO) -> (RustResult) query;
  validateUnretirePlayer: (UnretirePlayerDTO) -> (RustResult) query;
  validateUpdateClub: (UpdateClubDTO) -> (RustResult) query;
  validateUpdateLeague: (UpdateLeagueDTO) -> (RustResult) query;
  validateUpdatePlayer: (UpdatePlayerDTO) -> (RustResult) query;
}
