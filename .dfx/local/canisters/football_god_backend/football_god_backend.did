type ViewPredictionDTO = 
 record {
   correstScores: nat8;
   fixtures: vec FixtureDTO;
   playerName: text;
   seasonName: text;
   totalFixtures: nat8;
 };
type UserGameweek = 
 record {
   correctScores: nat8;
   enteredSweepstake: bool;
   gameweekNumber: nat8;
   predictionCount: nat8;
   predictions: List;
   seasonId: nat16;
   winnings: nat;
 };
type UserBalances = 
 record {
   entries: vec Profile;
   totalEntries: nat32;
 };
type Team = 
 record {
   id: nat16;
   name: text;
 };
type SubmitPlayDTO = 
 record {
   enterSweepstake: bool;
   fixtures: vec FixtureDTO;
 };
type Season = 
 record {
   gameweeks: List_1;
   id: nat16;
   name: text;
   year: nat16;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type Profile = 
 record {
   balance: nat64;
   depositAddress: blob;
   displayName: text;
   principalName: text;
   wallet: text;
 };
type Prediction = 
 record {
   awayGoals: nat8;
   fixtureId: nat32;
   homeGoals: nat8;
 };
type PlayDTO = 
 record {
   accountBalance: nat64;
   activeGameweekNumber: nat8;
   activeSeasonId: nat16;
   activeSeasonName: text;
   fixtures: vec FixtureDTO;
   sweepstakePaid: bool;
   userId: text;
 };
type PayoutData = 
 record {
   totalPot: nat64;
   winners: nat;
 };
type List_2 = 
 opt record {
       Fixture;
       List_2;
     };
type List_1 = 
 opt record {
       Gameweek;
       List_1;
     };
type List = 
 opt record {
       Prediction;
       List;
     };
type LeaderboardEntry = 
 record {
   correctScores: nat8;
   displayName: text;
   enteredSweepstake: bool;
   positionText: text;
   predictionCount: nat8;
   principalName: text;
 };
type Leaderboard = 
 record {
   entries: vec LeaderboardEntry;
   totalEntries: nat32;
 };
type HomeDTO = 
 record {
   activeGameweekNumber: nat8;
   activeSeasonName: text;
   fixtures: vec FixtureDTO;
   gameweekPot: nat64;
   gameweekStatus: nat8;
   systemUpdating: bool;
 };
type GameweekSummary = 
 record {
   displayName: text;
   principalName: text;
 };
type Gameweek = 
 record {
   fixtureCount: nat8;
   fixtures: List_2;
   number: nat8;
   status: nat8;
 };
type FixtureDTO = 
 record {
   awayTeamGoals: nat8;
   awayTeamId: nat16;
   awayTeamName: text;
   awayTeamPrediction: nat8;
   correct: bool;
   fixtureId: nat32;
   homeTeamGoals: nat8;
   homeTeamId: nat16;
   homeTeamName: text;
   homeTeamPrediction: nat8;
   status: nat8;
 };
type Fixture = 
 record {
   awayGoals: nat8;
   awayTeamId: nat16;
   homeGoals: nat8;
   homeTeamId: nat16;
   id: nat32;
   status: nat8;
 };
type Error = 
 variant {
   AlreadyExists;
   DecodeError;
   NotAllowed;
   NotAuthorized;
   NotFound;
 };
type CorrectPredictions = 
 record {
   entries: vec GameweekSummary;
   totalEntries: nat32;
 };
service : {
  addFixtureToGameweek: (nat16, nat8, nat16, nat16) -> (Result);
  checkSweepstakePaid: (nat16, nat8) -> (bool);
  createSeason: (text, nat16) -> (Result);
  createTeam: (text) -> (Result);
  deleteFixture: (nat16, nat8, nat32) -> (Result);
  deleteSeason: (nat16) -> (Result);
  deleteTeam: (nat16) -> (Result);
  getActiveGameweek: () -> (opt Gameweek) query;
  getActiveSeason: () -> (opt Season) query;
  getCorrectPredictions: (nat16, nat8, nat32, nat, nat) ->
   (opt CorrectPredictions);
  getFixture: (nat16, nat8, nat32) -> (opt Fixture) query;
  getFixtures: (nat16, nat8) -> (vec Fixture) query;
  getGameweeks: (nat16) -> (vec Gameweek) query;
  getHomeDTO: () -> (HomeDTO);
  getLeaderboard: (nat16, nat8, nat, nat) -> (Leaderboard);
  getPayoutData: (nat16, nat8) -> (opt PayoutData);
  getPlayDTO: () -> (PlayDTO);
  getPredictions: (nat16, nat8) -> (vec Prediction);
  getProfile: () -> (opt Profile);
  getPublicProfile: (text) -> (opt Profile);
  getSeason: (nat16) -> (opt Season) query;
  getSeasons: () -> (vec Season) query;
  getTeams: () -> (vec Team) query;
  getUserAccountBalance: () -> (nat64);
  getUserHistory: (nat16) -> (vec UserGameweek);
  getUserPredictions: (text, nat16, nat8) -> (vec Prediction);
  getUsersWithBalances: (nat, nat) -> (opt UserBalances);
  getViewPredictionDTO: (text, nat16, nat8) -> (ViewPredictionDTO);
  isAdmin: () -> (bool) query;
  isDisplayNameValid: (text) -> (bool);
  isWalletValid: (text) -> (bool);
  payoutSweepstake: (nat16, nat8) -> (Result);
  setActiveGameweek: (nat8) -> (Result);
  setActiveSeason: (nat16) -> (Result);
  submitPlayDTO: (SubmitPlayDTO) -> (Result);
  unsetActiveState: () -> (Result);
  updateDisplayName: (text) -> (Result);
  updateFixture: (nat16, nat8, nat32, nat16, nat16, nat8, nat8, nat8) ->
   (Result);
  updateGameweekStatus: (nat16, nat8, nat8) -> (Result);
  updateSeason: (nat16, text, nat16) -> (Result);
  updateTeam: (nat16, text) -> (Result);
  updateWalletAddress: (text) -> (Result);
  withdrawICP: (float64) -> (Result);
}
